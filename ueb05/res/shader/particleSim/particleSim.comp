#version 430 core

/**
 * Partikel-Simulations-Shader.
 * 
 * Copyright (C) 2020, FH Wedel
 * Autor: Henrik Patjens, Jonas Sorgenfrei, Nicolas Hollmann, Mario Da Graca, Christopher Ploog
 */

// -----------------------------------------------------------------------------
// Attribute
// -----------------------------------------------------------------------------

// Größe der lokalen Workgroup
layout (local_size_x = 100, local_size_y = 1, local_size_z = 1) in;

// Buffer für die Positionen der Partikel
layout (std430, binding = 0) buffer PositionBuffer {
    vec4 positions[];
};

// Buffer für die Geschwindigkeiten der Partikel
layout (std430, binding = 1) buffer VelocitiesBuffer {
    vec4 velocities[];
};

// Buffer für die Restliche Lebenszeit der Partikel
layout (std430, binding = 2) buffer LifeLeftBuffer {
    float lifeLeft[];
};

// -----------------------------------------------------------------------------
// Uniforms
// -----------------------------------------------------------------------------

// Zeitdifferenz zum letzten Aufruf
uniform float Dt;

// Gravitation der Simulation
uniform vec3 Gravity;

// StartPosition der Partikel
uniform vec3 startPos;

// StartDirection der Partikel
uniform vec3 startDir;

//Maximale Zufaellige StartRichtung
uniform float startDirRand;

// Maximale Lebenszeit der Partikel
uniform float lifeTimeTotal;

// Maximale Zufaellige LebendsZeit
uniform float lifeTimeRand;


// -----------------------------------------------------------------------------
// Funktionen
// -----------------------------------------------------------------------------

/**
 * Berechnet auf Basis eines 2D-Vektors einen Zufallswert
 *
 * @param xi 2D-Vektor als Grundlage des Zufallswertes
 * @return Pseudo-Zufallswert
 */
float rand(vec2 xi)
{
    return fract(sin(dot(xi.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

/**
 * Einstiegspunkt für den Compute-Shader.
 */
void main()
{
    // Position und Geschwindigkeit aus Shader Storage Buffer lesen.
    // gl_GlobalInvocationID -> built-in Variable, einmaliger Index
    // des aktuellen Aufrufs in der globalen Workgroup.
    float timeLeftLife = lifeLeft[gl_GlobalInvocationID.x];
    vec4 position = positions[gl_GlobalInvocationID.x];    
    vec4 velocity = velocities[gl_GlobalInvocationID.x];

    if (timeLeftLife > 0.0f){
        // Trägheit der Partikel simulieren.
        velocity += vec4(Gravity.xyz, 0.0f) * Dt;
        // Neue Position berechnen.
        position += Dt * velocity;
        // Verbleibene Zeit reduzieren
        timeLeftLife -= Dt; 
    } else {
        // Startposition setzen und StartRichtung zufaelig bestimmen
        position = vec4(startPos.xyz, 0.0f);
        velocity = vec4(startDir.xyz, 0.0f);
        velocity[0] += (rand(vec2(gl_GlobalInvocationID.x, timeLeftLife)) * startDirRand) - (0.5f * startDirRand);
        velocity[1] += (rand(vec2(gl_GlobalInvocationID.x + 1, timeLeftLife)) * startDirRand) - (0.5f * startDirRand);
        velocity[2] += (rand(vec2(gl_GlobalInvocationID.x + 2, timeLeftLife)) * startDirRand) - (0.5f * startDirRand);
        // Zufaellige Zeit bestimmen
        timeLeftLife = lifeTimeTotal + lifeTimeRand * rand(vec2(gl_GlobalInvocationID.x, timeLeftLife));

    }
    // Position, Geschwindigkeit und Lebenszeit in Shader Storage Buffer schreiben.
    lifeLeft[gl_GlobalInvocationID.x] = timeLeftLife;
    positions[gl_GlobalInvocationID.x] = position;
    velocities[gl_GlobalInvocationID.x] = velocity;
    
}
